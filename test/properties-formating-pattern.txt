# Description
#
# The anti-pattern file is a text file that is read line by line.
#
# A hash at the beginning of a line (blank characters are allowed before) marks
# the line as a comment. Comments are not read and skipped. Means they are
# processed as if the line does not exist.
#
# Characters can be encoded hexadecimal.
#
#     e.g. \x<HEX> (\x23 = #, \x20 = space)
#
# The anti-pattern are organized in sections. A section begins after a blank
# line and is continued without blank line in the following line.
#
# The section of a anti-pattern has three and more lines.
#
#     line 1: file filter
#
# - space characters are separators
# - every part of the filter must start with a directive
# - backslash / slash are identical
# - placeholders * and ? are supported
# - delimiter + (include) and - (exclude)
#
#     line 2 primary pattern and optional partial patterns (sub-pattern)
#     from line 3 more optional partial patterns (sub-pattern)
#
# - primary pattern is the main pattern (always an include)
#   The match found is then searched for partial patterns. Partial patterns can
#   be inclusions and exclusions. Inclusions must begin with + and - begin
#   exclusions. The primary pattern has no directive. All partial patterns must
#   be true, only then is the action executed.
# - patterns are separated by white spaces
#   In a pattern, spaces must be encoded hexadecimal.
#
# AVOID LOOKBEHIND AT THE BEGINNING AND LOOKAHEAD AT THE END!
# THE PATTERNS ARE FOUND, EXTRACTED TO REPLACE BUT DO NOT FIT, BECAUSE MATCH
# STARTS AFTER LOOKBEHIND AND ENDS BEFORE LOOKAHEAD.
#
#     last line: action
#
# The action is primarily a regular replacement, corresponding to the search
# pattern. When replacing, the groups and the backward references of the primary
# pattern can be used. Secondary patterns cannot be used. The action always
# starts with a command that can be followed by spaces and then other arguments.
#
#     The following additional actions are supported:
#
#     DETECT
# Detects match and outputs details of the location.
#
#     DETECT <message>
# Detects match and outputs details of the location.
# The second line displays the specified message.
#
#     PATCH
# Without replacement, the match will be removed.
# Performs the replacement if the replacement is allowed as a program argument.
# Otherwise, the command behaves like DETECT.
#
#     PATCH <replacement>
# Replaces the match with the specified replacement.
# The function requires the -x option to perform modifications.
# Otherwise, the command behaves like DETECT.
#
#     REMOVE
# Deletes the match.
# The function requires the -x option to perform modifications.
# Otherwise, the command behaves like DETECT.



# General file rule: Ignore all dot directories
# ----



# No blanks after the line continuation (/) at the end of a line,
# because this deactivates the line continuation
- */.*/* + *.properties
(?m)\\\s+$
PATCH \\

# No line continuation (/) without continuation line
- */.*/* + *.properties
(?s)(\\)(\s*\r\n){2,}
PATCH $1\r\n

# No line continuation (/) without continuation line
# Following lines are normally indented by spaces
- */.*/* + *.properties
(?s)\\(\r\n\w)
PATCH $1

# Masked line breaks are not preceded by spaces
- */.*/* + *.properties
([\w])\x20+(\\u000A)
PATCH $1$2

# Label and value are separated by " = "
- */.*/* + *.properties
(?m)^([\w]+[\.][\w\.]+)(=)
PATCH $1 $2

# Label and value are separated by " = "
- */.*/* + *.properties
(?m)^([\w]+[\.][\w\.]+\s+=)([^\s])
PATCH $1 $2

# Escaped line breaks are not preceded with spaces
- */.*/* + *.properties
([\w])\x20+(\\u000A)
PATCH $1$2

# No spaces after the line continuation (/) at the end of a line,
# because this deactivates the line continuation
- */.*/* + *.properties
(?m)\\\s+$
PATCH \\

# No line continuation (/) without continuation line
- */.*/* + *.properties
(?s)(\\)(\s*\r\n){2,}
PATCH $1\r\n

# No line continuation (/) without continuation line
# Following lines are normally indented by spaces
- */.*/* + *.properties
(?s)\\(\r\n\w)
PATCH $1
