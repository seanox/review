# Description
#
# The anti-pattern file is a text file that is read line by line.
#
# A hash at the beginning of a line (blank characters are allowed before) marks
# the line as a comment. Comments are not read and skipped. Means they are
# processed as if the line does not exist.
#
# Characters can be encoded hexadecimal.
#
#     e.g. \x<HEX> (\x23 = #, \x20 = space)
#
# The anti-pattern are organized in sections. A section begins after a blank
# line and is continued without blank line in the following line.
#
# The section of a anti-pattern has three and more lines.
#
#     line 1: file filter
#
# - space characters are separators
# - every part of the filter must start with a directive
# - backslash / slash are identical
# - placeholders * and ? are supported
# - delimiter + (include) and - (exclude)
#
#     line 2 primary pattern and optional partial patterns (sub-pattern)
#     from line 3 more optional partial patterns (sub-pattern)
#
# - primary pattern is the main pattern (always an include)
#   The match found is then searched for partial patterns. Partial patterns can
#   be inclusions and exclusions. Inclusions must begin with + and - begin
#   exclusions. The primary pattern has no directive. All partial patterns must
#   be true, only then is the action executed.
# - patterns are separated by white spaces
#   In a pattern, spaces must be encoded hexadecimal.
#
# AVOID LOOKBEHIND AT THE BEGINNING AND LOOKAHEAD AT THE END!
# THE PATTERNS ARE FOUND, EXTRACTED TO REPLACE BUT DO NOT FIT, BECAUSE MATCH
# STARTS AFTER LOOKBEHIND AND ENDS BEFORE LOOKAHEAD.
#
#     last line: action
#
# The action is primarily a regular replacement, corresponding to the search
# pattern. When replacing, the groups and the backward references of the primary
# pattern can be used. Secondary patterns cannot be used. The action always
# starts with a command that can be followed by spaces and then other arguments.
#
#     The following additional actions are supported:
#
#     DETECT
# Detects match and outputs details of the location.
#
#     DETECT <message>
# Detects match and outputs details of the location.
# The second line displays the specified message.
#
#     PATCH
# Without replacement, the match will be removed.
# Performs the replacement if the replacement is allowed as a program argument.
# Otherwise, the command behaves like DETECT.
#
#     PATCH <replacement>
# Replaces the match with the specified replacement.
# The function requires the -x option to perform modifications.
# Otherwise, the command behaves like DETECT.
#
#     REMOVE
# Deletes the match.
# The function requires the -x option to perform modifications.
# Otherwise, the command behaves like DETECT.



# General rules:
# - ignore all dot directories
# - work recursive



# Examples for CSS
# ----

# For TAB 2 spaces are used
# - */.*/* + *.css
# \x09
# PATCH \x20\x20

# Line by line, key and value are separated by colon and a space
# For testing, ignore all property with the name ignore
# - */.*/* + *.css
# (?s)((?:\R|;)\s*[^\s;:]+)\s*:\s*([^\s;:])
# - .*ignore.*
# PATCH $1:\x20$2

# Before a curly bracket is one space
# - */.*/* + *.css
# \s+(\{)
# PATCH \x20$1



# Examples for Java
# ----

# Find capitalized variables
# Include all *.java files, ignore all dot directories
# - */.*/* + *.java
# private\s+[A-Za-z]+\s[A-Z][\w]+;
# DETECT check it, uncapitalize

# Find constants without final
# Include all *.java files, ignore all dot directories
# - */.*/* +  *.java
# \x20+(\x20+[a-z]+){1,}\x20+[A-Z]{2,} -\sfinal\s
# DETECT check it, use 'final' for constants

# Find constants without static
# Include all *.java files, ignore all dot directories
# - */.*/* +  *.java
# \x20+(\x20+[a-z]+){1,}\x20+[A-Z]{2,} -\sstatic\s
# DETECT check it, use 'static' for constants

# Find class|interface|enun with invalid name
# Include all *.java files, ignore all dot directories
# - */.*/* +  *.java
# \s(class|interface|enun)\s+[A-Z]*[a-zA-Z0-9]*[A-Z]{2}
# DETECT check it, use camel case for class/interface/enum

# Find class|interface|enun with invalid name
# Include all *.java files, ignore all dot directories
# - */.*/* +  *.java
# \s(class|interface|enun)\s+(?i)[a-z0-9]*[^a-z0-9\s]
# DETECT check it, use only chars a-z, 0-9 for class/interface/enum

# Find all new Boolean(true) and replace in Boolean.TRUE
# Include all *.java files, ignore all dot directories
# - */.*/* +  *.java
# new\s+Boolean\(\s*true\s*\)
# PATCH Boolean.TRUE

# Find all new Boolean(false) and replace in Boolean.FALSE
# Include all *.java files, ignore all dot directories
# - */.*/* +  *.java
# new\s+Boolean\s*\(\s*false\s*\)
# PATCH Boolean.FALSE

# Find all the places where 'valueOf' can be used and correct it
# Include all *.java files, ignore all dot directories
# - */.*/* +  *.java
# new\s+(Boolean|Byte|Character|Double|Float|Integer|Long|Short)\s*\(
# PATCH $1.valueOf(

# Find as strings in quotes
# Use strings like an object and enclose them with round brackets (small quirk)
# - */.*/* + *.java
# ("[^"\r\n,\+]*")\s*(\.[a-zA-Z])
# PATCH ($1)$2

# Find initial value false for a boolean
# Do not use a default value initially
# - */.*/* + *.java
# ((?:private|protected|public)\s+boolean\s+\w+)\s*=\s*false\s*(;)
# PATCH $1$2

# Find initial values for instance variables
# Use final, initialize in static block or use constructor
# - */.*/* + *.java
# (?i)\x20+(private|protected|public)[^;\r\n]+= -.*\bfinal\b.*
# DETECT Check the assigment of value

# Find magic numbers
# No Magic numbers, better use constants
# - */.*/* + *.java
# ".*?[<>=]+\s*[2-9]
# DETECT Check usage of magic numbers, better use constants



# Examples for HTML
# ----

# finds a-tag where the title-attribute ist empty or missing
# include all *.html files, ignore all .svn directories
# - */.*/* + *.html
# (?i)<\s*a[^>]+> -(?i)\btitle="[^"]+"
# DETECT check it, a-tag with invalid title-attribute

# finds a-tag where the href-attribute ist empty or missing
# include all *.html files, ignore all .svn directories
# - */.*/* + *.html
# (?i)<\s*a[^>]+> -(?i)\bhref="[^"]+"
# DETECT check it, a-tag with invalid href-attribute

# finds input-tags without label-tag
# include all *.html files, ignore all .svn directories
# - */.*/* + *.html
# <\s*[^/].*?\s*<input -<\s*label
# DETECT check it, use input alway with a label



# Examples for properties
# ----

# only 7-bit characters (x0D x0A x20-x7F xA7) are used
# + *.properties
# ([\x80-\xFF])
# DETECT Use ASCII code only
